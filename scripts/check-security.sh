#!/bin/bash

echo "üîç Verificando seguran√ßa do projeto..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

ISSUES_FOUND=0
CRITICAL_ISSUES=()

# Fun√ß√£o para adicionar problema cr√≠tico
add_critical_issue() {
    CRITICAL_ISSUES+=("$1")
    ISSUES_FOUND=$((ISSUES_FOUND + 1))
}

echo -e "\n${BLUE}=== VERIFICA√á√ÉO DE ARQUIVOS SENS√çVEIS ===${NC}"

# 1. Verificar se .env existe e n√£o est√° no git
echo -e "\nüìÅ Verificando arquivo .env..."
if [ -f ".env" ]; then
    if git check-ignore .env > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Arquivo .env est√° sendo ignorado pelo Git${NC}"
    else
        echo -e "${RED}‚ùå CR√çTICO: Arquivo .env N√ÉO est√° sendo ignorado pelo Git!${NC}"
        add_critical_issue "Arquivo .env n√£o est√° no .gitignore"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado${NC}"
fi

# 2. Verificar se .env.example existe
echo -e "\nüìÑ Verificando arquivo .env.example..."
if [ -f ".env.example" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .env.example encontrado${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env.example n√£o encontrado${NC}"
fi

# 3. Verificar arquivos SQLite antigos
echo -e "\nüóÑÔ∏è  Verificando arquivos SQLite antigos..."
SQLITE_FILES=$(find . -name "*.db" -o -name "*.sqlite" -o -name "*.sqlite3" 2>/dev/null | head -10)
if [ -n "$SQLITE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivos SQLite encontrados:${NC}"
    while IFS= read -r db_file; do
        echo "   - $db_file"
        if ! git check-ignore "$db_file" > /dev/null 2>&1; then
            echo -e "${RED}     ‚ùå CR√çTICO: N√ÉO est√° sendo ignorado pelo Git!${NC}"
            add_critical_issue "Arquivo SQLite $db_file n√£o est√° sendo ignorado"
        else
            echo -e "${GREEN}     ‚úÖ Est√° sendo ignorado${NC}"
        fi
    done <<< "$SQLITE_FILES"
else
    echo -e "${GREEN}‚úÖ Nenhum arquivo SQLite encontrado${NC}"
fi

# 4. Verificar diret√≥rio de backups
echo -e "\nüíæ Verificando diret√≥rio de backups..."
if [ -d "backups" ]; then
    if git check-ignore backups > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Diret√≥rio backups est√° sendo ignorado pelo Git${NC}"
    else
        echo -e "${RED}‚ùå CR√çTICO: Diret√≥rio backups N√ÉO est√° sendo ignorado pelo Git!${NC}"
        add_critical_issue "Diret√≥rio backups n√£o est√° sendo ignorado"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Diret√≥rio backups n√£o existe${NC}"
fi

# 5. Verificar arquivos .env* no Git
echo -e "\nüîê Verificando arquivos .env* no Git..."
ENV_FILES_IN_GIT=$(git ls-files 2>/dev/null | grep -E "\.env$|\.env\." || true)
if [ -n "$ENV_FILES_IN_GIT" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Arquivos .env encontrados no Git:${NC}"
    echo "$ENV_FILES_IN_GIT" | while read -r file; do
        echo -e "${RED}   - $file${NC}"
        add_critical_issue "Arquivo .env $file est√° sendo trackeado pelo Git"
    done
else
    echo -e "${GREEN}‚úÖ Nenhum arquivo .env sendo trackeado${NC}"
fi

# 6. Verificar arquivos de backup no Git (EXCLUINDO migra√ß√µes do Prisma)
echo -e "\nüíæ Verificando arquivos de backup no Git..."
BACKUP_FILES_IN_GIT=$(git ls-files 2>/dev/null | grep -E "\.(backup|bak|sql\.gz|dump)$" | grep -v "prisma/migrations" || true)
if [ -n "$BACKUP_FILES_IN_GIT" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Arquivos de backup encontrados no Git:${NC}"
    echo "$BACKUP_FILES_IN_GIT" | while read -r file; do
        echo -e "${RED}   - $file${NC}"
        add_critical_issue "Arquivo de backup $file est√° sendo trackeado pelo Git"
    done
else
    echo -e "${GREEN}‚úÖ Nenhum arquivo de backup sendo trackeado${NC}"
fi

# 7. Verificar migra√ß√µes do Prisma (devem estar no Git)
echo -e "\nüîÑ Verificando migra√ß√µes do Prisma..."
PRISMA_MIGRATIONS=$(find . -path "*/prisma/migrations/*.sql" 2>/dev/null)
if [ -n "$PRISMA_MIGRATIONS" ]; then
    echo -e "${GREEN}‚úÖ Migra√ß√µes do Prisma encontradas (correto):${NC}"
    echo "$PRISMA_MIGRATIONS" | while read -r file; do
        echo -e "${GREEN}   - $file${NC}"
    done
else
    echo -e "${YELLOW}‚ö†Ô∏è  Nenhuma migra√ß√£o do Prisma encontrada${NC}"
fi

# 8. Verificar arquivos SQLite no Git
echo -e "\nüóÑÔ∏è  Verificando arquivos SQLite no Git..."
SQLITE_IN_GIT=$(git ls-files 2>/dev/null | grep -E "\.(db|sqlite|sqlite3)$" || true)
if [ -n "$SQLITE_IN_GIT" ]; then
    echo -e "${RED}‚ùå CR√çTICO: Arquivos SQLite encontrados no Git:${NC}"
    echo "$SQLITE_IN_GIT" | while read -r file; do
        echo -e "${RED}   - $file${NC}"
        add_critical_issue "Arquivo SQLite $file est√° sendo trackeado pelo Git"
    done
else
    echo -e "${GREEN}‚úÖ Nenhum arquivo SQLite sendo trackeado${NC}"
fi

# 9. Verificar se .gitignore existe
echo -e "\nüìù Verificando arquivo .gitignore..."
if [ -f ".gitignore" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .gitignore existe${NC}"
    
    # Verificar se tem as entradas essenciais
    MISSING_ENTRIES=()
    
    if ! grep -q "\.env" .gitignore; then
        MISSING_ENTRIES+=(".env")
    fi
    
    if ! grep -q "backups" .gitignore; then
        MISSING_ENTRIES+=("backups/")
    fi
    
    if ! grep -q "\*\.db\|\*\.sqlite" .gitignore; then
        MISSING_ENTRIES+=("*.db ou *.sqlite")
    fi
    
    if [ ${#MISSING_ENTRIES[@]} -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Entradas importantes faltando no .gitignore:${NC}"
        for entry in "${MISSING_ENTRIES[@]}"; do
            echo -e "${YELLOW}   - $entry${NC}"
        done
    fi
else
    echo -e "${RED}‚ùå CR√çTICO: Arquivo .gitignore n√£o existe!${NC}"
    add_critical_issue "Arquivo .gitignore n√£o existe"
fi

# 10. Verificar arquivos de backup reais no diret√≥rio backups/
echo -e "\nüóÇÔ∏è  Verificando arquivos no diret√≥rio backups..."
if [ -d "backups" ]; then
    BACKUP_FILES=$(find backups/ -type f 2>/dev/null | head -5)
    if [ -n "$BACKUP_FILES" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivos encontrados no diret√≥rio backups:${NC}"
        echo "$BACKUP_FILES" | while read -r file; do
            echo "   - $file"
            if ! git check-ignore "$file" > /dev/null 2>&1; then
                echo -e "${RED}     ‚ùå CR√çTICO: N√ÉO est√° sendo ignorado pelo Git!${NC}"
                add_critical_issue "Arquivo de backup $file n√£o est√° sendo ignorado"
            else
                echo -e "${GREEN}     ‚úÖ Est√° sendo ignorado${NC}"
            fi
        done
    else
        echo -e "${GREEN}‚úÖ Diret√≥rio backups vazio${NC}"
    fi
fi

echo -e "\n${BLUE}=== RESUMO FINAL ===${NC}"

if [ $ISSUES_FOUND -eq 0 ]; then
    echo -e "\n${GREEN}üéâ SUCESSO: Nenhum problema cr√≠tico de seguran√ßa encontrado!${NC}"
    echo -e "${GREEN}‚úÖ Projeto seguro para commit${NC}"
    echo -e "${GREEN}‚úÖ Migra√ß√µes do Prisma est√£o corretamente no Git${NC}"
else
    echo -e "\n${RED}‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS: $ISSUES_FOUND${NC}"
    echo -e "${RED}üö´ N√ÉO fa√ßa commit at√© corrigir os problemas${NC}"
    
    echo -e "\n${YELLOW}üìã Lista de problemas cr√≠ticos:${NC}"
    for i in "${!CRITICAL_ISSUES[@]}"; do
        echo -e "${RED}   $((i+1)). ${CRITICAL_ISSUES[i]}${NC}"
    done
    
    echo -e "\n${YELLOW}üîß Comandos de corre√ß√£o sugeridos:${NC}"
    
    # Verificar arquivos sens√≠veis (excluindo migra√ß√µes do Prisma)
    SENSITIVE_FILES=$(git ls-files 2>/dev/null | grep -E "\.(env|db|sqlite|backup|bak|sql\.gz|dump)$" | grep -v "prisma/migrations" || true)
    if [ -n "$SENSITIVE_FILES" ]; then
        echo -e "${YELLOW}   # Remover arquivos sens√≠veis do Git:${NC}"
        echo "$SENSITIVE_FILES" | while read -r file; do
            echo -e "${YELLOW}   git rm --cached '$file'${NC}"
        done
    fi
    
    if [ ! -f ".gitignore" ]; then
        echo -e "${YELLOW}   # Criar .gitignore b√°sico:${NC}"
        echo -e "${YELLOW}   touch .gitignore${NC}"
    fi
    
    echo -e "\n${YELLOW}   # Ap√≥s as corre√ß√µes, execute novamente:${NC}"
    echo -e "${YELLOW}   ./scripts/check-security.sh${NC}"
fi

echo -e "\n${BLUE}üí° Nota: Arquivos de migra√ß√£o do Prisma (*.sql em prisma/migrations/) s√£o normais e devem estar no Git.${NC}"

exit $ISSUES_FOUND 